{"version":3,"sources":["App/styles.ts","App/index.tsx","index.tsx"],"names":["getStyles","makeStyles","app","color","paddingTop","textAlign","backgroundColor","minHeight","display","flexDirection","alignItems","fontSize","gap","inputBlock","width","input","marginBottom","borderBottomColor","container","paddingBottom","dayjs","extend","customParseFormat","App","classes","useState","mainValue","setMainValue","firstValue","setFirstValue","currentDate","setCurrentDate","main1Part","String","split","main2Part","firstValue1Part","firstValue2Part","adaptMain1Part","Number","adaptMain2Part","sumBeforePoint","sumAfterPoint","firstBranch","final","ww","allRes","a","b","middleBeforePoint","middleAfterPoint","res","toFixed","result","resultPart1","result2Part","action3","month","date","Math","round","adaptDate","finalDate","add","format","className","Tooltip","title","arrow","open","length","TextField","placeholder","onChange","e","currentTarget","value","style","timezone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18cf6835.chunk.js","sourcesContent":["import {\n    makeStyles,\n} from '@material-ui/core';\n\n\nexport const getStyles = makeStyles(() => ({\n    app: {\n        color: 'rgba(245,245,220,0.7)',\n        paddingTop: 100,\n        textAlign: 'center',\n        backgroundColor: '#282c34',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        fontSize: 'calc(10px + 2vmin)',\n        gap: 64\n    },\n    inputBlock: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: 300\n    },\n    input: {\n        marginBottom: 10,\n        '& .MuiInputLabel-root': {\n            color: \"beige\"\n          },\n        '& .MuiInputBase-input': {\n            color: 'beige',\n        },\n        '& .MuiInput-underline:before': {\n            borderBottomColor: '#fff8',\n        },\n        '& .MuiInput-underline:hover:before': {\n            borderBottomColor: '#fff',\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: '#fff',\n        },\n    },\n    container: {\n        width: '50%',\n        paddingBottom: 100\n    }\n}));","import React, { useState } from 'react';\nimport { TextField, Tooltip } from '@material-ui/core';\nimport { getStyles } from './styles';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\ndayjs.extend(customParseFormat)\n\n\nexport const App = () => {\n    const classes = getStyles();\n\n    const [mainValue, setMainValue] = useState(''); // главное число которое не меняется\n    const [firstValue, setFirstValue] = useState(''); // первое из вводимых данных\n    const [currentDate, setCurrentDate] = useState(''); // первое из вводимых данных\n\n    const main1Part = String(mainValue).split('.')[0]; // главное число до точки\n    const main2Part = String(mainValue).split('.')[1]; // главное число после точки\n\n    const firstValue1Part = String(firstValue).split('.')[0]; // первое из вводимых данных до точки\n    const firstValue2Part = String(firstValue).split('.')[1]; // первое из вводимых после до точки\n\n    const adaptMain1Part = 29 - Number(main1Part); // главное адаптировано до точки\n    const adaptMain2Part = 60 - Number(main2Part); // главное адаптировано после точки\n\n    let sumBeforePoint = Number(adaptMain1Part) + Number(firstValue1Part); // сумма чисел до точки\n    let sumAfterPoint = Number(adaptMain2Part) + Number(firstValue2Part); // сумма чисел после точки\n\n\n    const firstBranch = () => {\n        let final;\n        let middleResult;\n        if (sumAfterPoint >= 60) {\n            const ww = (Number(adaptMain2Part) + Number(firstValue2Part)) - 60;\n            sumBeforePoint += 1\n            if (ww < 10) {\n                middleResult = `${sumBeforePoint}.0${ww}`\n            } else {\n                middleResult = `${sumBeforePoint}.${ww}`\n            }\n            final = middleResult\n        } else {\n            final = `${sumBeforePoint}.${sumAfterPoint}`\n        }\n        return final\n    }\n\n    const addZero = (a: number, b: number) => {\n        let res;\n        if (a - b < 10) {\n            res = `0${a - b}`\n        } else {\n            res = a - b\n        }\n        return res\n    }\n\n    const result = (): string => {\n        let final;\n        if (Number(firstValue1Part) > Number(main1Part)) {\n            let middleBeforePoint = Number(firstValue1Part) - Number(main1Part);\n\n            if (Number(firstValue2Part) < Number(main2Part)) {\n\n                let middleAfterPoint = String(60 + Number(firstValue2Part) - Number(main2Part));\n\n                middleBeforePoint -= 1\n\n                if (Number(middleAfterPoint) < 10) {\n                    middleAfterPoint = `0${middleAfterPoint}`\n                }\n                final = `${middleBeforePoint}.${middleAfterPoint}`\n\n            } else {\n                final = `${middleBeforePoint}.${addZero(Number(firstValue2Part), Number(main2Part))}`;\n            }\n            return final\n        } else if (Number(firstValue1Part) === Number(main1Part)) {\n            if (Number(main2Part) > Number(firstValue2Part)) {\n                final = firstBranch();\n            } else {\n                const res = (Number(firstValue) - Number(mainValue)).toFixed(2)\n                final = String(res)\n            }\n        } else {\n            final = firstBranch();\n        }\n        return final\n    }\n\n    const allRes = result();\n    const resultPart1 = Number(allRes.split('.')[0])\n    const result2Part = Number((Number(allRes.split('.')[1]) / 60).toFixed(2));\n    const sum2action = resultPart1 + result2Part // сумма после второго действия\n\n\n    const action3 = sum2action / 2.5 // третье действие\n    const month = String(action3).split('.')[0];\n    const date = Math.round(Number(Number(`0.${String(action3).split('.')[1]}`).toFixed(2)) * 30) || 0\n\n    const adaptDate = currentDate && dayjs(currentDate, 'DD.MM.YYYY')\n    const finalDate = (month || date) && dayjs(adaptDate).add(Number(month), 'month').add(Number(date), 'day').format('DD MMMM YYYY')\n\n    return (\n        <div className={classes.app}>\n            <div className={classes.inputBlock}>\n                <Tooltip title=\"Необходимо добавить 2 цифру\" arrow open={main2Part && main2Part.length < 2 ? true : false}>\n                    <TextField placeholder='градусы Мундхеши' className={classes.input} onChange={(e) => setMainValue(e.currentTarget.value)} />\n                </Tooltip>\n\n                <Tooltip title=\"Необходимо добавить 2 цифру\" arrow open={firstValue2Part && firstValue2Part.length < 2 ? true : false}>\n                    <TextField placeholder='градусы планеты' className={classes.input} onChange={(e) => setFirstValue(e.currentTarget.value)} />\n                </Tooltip>\n\n                <TextField placeholder='дата рождения и текущий год' className={classes.input} onChange={(e) => setCurrentDate(e.currentTarget.value)} />\n            </div>\n\n            <div>\n                <div>\n                    {allRes}\n                </div>\n                <div>\n                    ____________________\n                </div>\n                <div>\n                    {resultPart1 + result2Part}\n                </div>\n                <div>\n                    ____________________\n                </div>\n                <div>\n                    {(resultPart1 + result2Part) / 2.5}\n                </div>\n                <div>\n                    ____________________\n                </div>\n                <div style={{ display: 'flex', gap: 8, flexDirection: 'column' }}>\n                    <div>\n                        месяцы: {month}\n                    </div>\n                    <div>\n                        дни: {date}\n                    </div>\n                </div>\n                <div>\n                    ____________________\n                </div>\n                <div>\n                    дата {finalDate}\n                </div>\n            </div>\n\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App/index';\nimport './index.css';\nimport dayjs from 'dayjs';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(timezone);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}